{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "Spendy",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "description": "This is a documentation of Expence Tracker â€” Spendy"
  },
  "servers": [
    {
      "url": "https://spendy-mu36.onrender.com"
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Auth operations."
    },
    {
      "name": "Categories",
      "description": "Get categories operation."
    },
    {
      "name": "Summary",
      "description": "Get summary by period."
    },
    {
      "name": "Transactions",
      "description": "Transactions operations."
    },
    {
      "name": "Users",
      "description": "Get users operation."
    }
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Register",
        "operationId": "Register",
        "description": "Register user",
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/register"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully registered a user!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully registered a user!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/user"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Email in use",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad request"
                    },
                    "data": {
                      "type": "string",
                      "example": "Bad request"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Email in use",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 409
                    },
                    "message": {
                      "type": "string",
                      "example": "Email in use"
                    },
                    "data": {
                      "type": "string",
                      "example": "Email in use"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Login",
        "operationId": "login",
        "description": "Logs in a user and returns an access token. Refresh token is set in cookies.",
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/login"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully logged in an user!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully logged in an user!"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "example": "3+JL5MkGWjdX6qTDv3yA1vFLWyFxOktcwtxvNXUP"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "User not found"
                    },
                    "data": {
                      "type": "string",
                      "example": "User not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Logout",
        "operationId": "logout",
        "description": "Logs out the user and removes session data from cookies and database",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string",
              "example": "Bearer cB31r7onciYnbnrDPbYtKrysfJD7gN6KyqQgLqL/"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Refresh session",
        "operationId": "refreshSession",
        "description": "Refresh access token using refresh token from cookies",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string",
              "example": "Bearer cB31r7onciYnbnrDPbYtKrysfJD7gN6KyqQgLqL/"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully refreshed a session!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully refreshed a session!"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "example": "3+JL5MkGWjdX6qTDv3yA1vFLWyFxOktcwtxvNXUP"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/categories": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Get all categories",
        "operationId": "getCategories",
        "description": "Get all categories",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string",
              "example": "Bearer cB31r7onciYnbnrDPbYtKrysfJD7gN6KyqQgLqL/"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved all categories",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found all categories!"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "_id": {
                            "type": "string",
                            "example": "682755dcb0aeef98f65c4a85"
                          },
                          "name": {
                            "type": "string",
                            "example": "Incomes"
                          },
                          "type": {
                            "type": "string",
                            "example": "income"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No categories found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "No categories found!"
                    },
                    "data": {
                      "type": "array",
                      "items": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/summary/{period}": {
      "get": {
        "tags": [
          "Summary"
        ],
        "summary": "Get transaction summary by period",
        "operationId": "getSummaryByPeriod",
        "description": "Returns income and expense summary by categories for a specific period (YYYY-MM). Requires authentication.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string",
              "example": "Bearer cB31r7onciYnbnrDPbYtKrysfJD7gN6KyqQgLqL/"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "period",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^\\d{4}-\\d{2}$"
            },
            "example": "2025-01",
            "description": "The period in format YYYY-MM"
          }
        ],
        "responses": {
          "200": {
            "description": "Summary retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "period": {
                      "type": "string",
                      "example": "2025-01"
                    },
                    "income": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "number",
                          "example": 2300
                        },
                        "byCategory": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "number"
                          },
                          "example": {
                            "Salary": 2000,
                            "Freelance": 300
                          }
                        }
                      }
                    },
                    "expense": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "number",
                          "example": 1200
                        },
                        "byCategory": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "number"
                          },
                          "example": {
                            "Food": 500,
                            "Rent": 700
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid period format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid or missing period. Use format YYYY-MM."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "description": "Summary not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "No transactions found for this period."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/transactions": {
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "Get all transactions",
        "description": "Retrieves a list of all transactions (details based on provided schema).",
        "operationId": "listTransactions",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string",
              "example": "Bearer cB31r7onciYnbnrDPbYtKrysfJD7gN6KyqQgLqL/"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "example": 1
            }
          },
          {
            "in": "query",
            "name": "perPage",
            "schema": {
              "type": "integer",
              "example": 8
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of transactions retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Transactions retrieved successfully"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "data",
                        "page",
                        "perPage",
                        "totalitems",
                        "totalPages",
                        "hasNextPages",
                        "hasPreviousPages"
                      ],
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "$ref": "#/components/schemas/transaction"
                          }
                        },
                        "page": {
                          "type": "integer",
                          "example": 1
                        },
                        "perPage": {
                          "type": "integer",
                          "example": 10
                        },
                        "totalPages": {
                          "type": "integer",
                          "example": 5
                        },
                        "totalitems": {
                          "type": "integer",
                          "example": 50
                        },
                        "hasNextPages": {
                          "type": "boolean",
                          "example": true
                        },
                        "hasPreviousPages": {
                          "type": "boolean",
                          "example": false
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Transactions"
        ],
        "summary": "Create a new transaction",
        "operationId": "createTransaction",
        "description": "Creates a new transaction with provided details.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string",
              "example": "Bearer cB31r7onciYnbnrDPbYtKrysfJD7gN6KyqQgLqL/"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "date",
                  "type",
                  "category",
                  "comment",
                  "sum"
                ],
                "properties": {
                  "date": {
                    "description": "Transaction's date",
                    "type": "string",
                    "format": "date",
                    "example": "10-May-2025"
                  },
                  "type": {
                    "description": "Transaction's type",
                    "type": "string",
                    "example": "+"
                  },
                  "category": {
                    "description": "Transaction's category",
                    "type": "string",
                    "example": "Car"
                  },
                  "comment": {
                    "description": "Transaction's comment",
                    "type": "string",
                    "minLength": 2,
                    "maxLength": 192,
                    "example": "Details of this transaction"
                  },
                  "sum": {
                    "description": "Amount of the transaction",
                    "type": "number",
                    "minimum": 0.01,
                    "maximum": 1000000,
                    "example": 300
                  }
                }
              },
              "examples": {
                "createTransactionRequest": {
                  "summary": "Example Transaction Request Body",
                  "value": {
                    "date": "2025-05-20",
                    "type": "+",
                    "category": "Food",
                    "comment": "Lunch expense",
                    "sum": 500
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/transactions/{id}": {
      "patch": {
        "tags": [
          "Transactions"
        ],
        "summary": "Update transaction",
        "operationId": "updateTransaction",
        "description": "Update a transaction by Id with payload",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string",
              "example": "Bearer cB31r7onciYnbnrDPbYtKrysfJD7gN6KyqQgLqL/"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "65ca67e7ae7f10c88b598384"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "date": {
                    "description": "Transaction's date",
                    "type": "string",
                    "format": "date",
                    "example": "2025-05-25"
                  },
                  "type": {
                    "description": "Transaction's type",
                    "type": "string",
                    "example": "+"
                  },
                  "category": {
                    "description": "Transaction's category",
                    "type": "string",
                    "example": "Car"
                  },
                  "comment": {
                    "description": "Transaction's comment",
                    "type": "string",
                    "maxLength": 100,
                    "example": "Details of this transaction"
                  },
                  "sum": {
                    "description": "Amount of the transaction",
                    "type": "number",
                    "minimum": 0.01,
                    "maximum": 1000000,
                    "example": 300
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated a transaction",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully update a transaction!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/transaction"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "delete": {
        "tags": [
          "Transactions"
        ],
        "summary": "Delete transaction",
        "operationId": "deleteTransaction",
        "description": "Delete a transaction by it's ID.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string",
              "example": "Bearer cB31r7onciYnbnrDPbYtKrysfJD7gN6KyqQgLqL/"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "65ca67e7ae7f10c88b598384"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted transaction"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/users/current": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user data",
        "operationId": "getCurrentUser",
        "description": "Get user data",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string",
              "example": "Bearer cB31r7onciYnbnrDPbYtKrysfJD7gN6KyqQgLqL/"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found user with id=682876f2d066eb3dfb488480",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found user with id=682876f2d066eb3dfb488480"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/user"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Session not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Session not found"
                    },
                    "data": {
                      "type": "string",
                      "example": "Session not found"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Updating user data",
        "operationId": "patchCurrentUser",
        "description": "Updating user data with the ability to add a photo",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string",
              "example": "Bearer cB31r7onciYnbnrDPbYtKrysfJD7gN6KyqQgLqL/"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "User name",
                    "type": "string",
                    "minLength": 2,
                    "maxLength": 32,
                    "example": "Martine Belly"
                  },
                  "email": {
                    "description": "User email",
                    "type": "string",
                    "maxLength": 64,
                    "example": "martine.belly@gmail.com"
                  },
                  "photo": {
                    "description": "Link to photo",
                    "type": "string",
                    "format": "binary",
                    "example": "https://res.cloudinary.com/dy4vxv2lf/image/upload/image.png"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully update user with id=682876f2d066eb3dfb488480",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully update user with id=682876f2d066eb3dfb488480"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/user"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Session not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Session not found"
                    },
                    "data": {
                      "type": "string",
                      "example": "Session not found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "register": {
        "type": "object",
        "required": [
          "name",
          "email",
          "password"
        ],
        "properties": {
          "name": {
            "description": "User name",
            "type": "string",
            "minLength": 2,
            "maxLength": 32,
            "example": "Martine Belly"
          },
          "email": {
            "description": "User email",
            "type": "string",
            "maxLength": 64,
            "example": "martine.belly@gmail.com"
          },
          "password": {
            "description": "User password",
            "type": "string",
            "minLength": 8,
            "maxLength": 64,
            "example": "password12345!"
          }
        }
      },
      "user": {
        "properties": {
          "_id": {
            "description": "User id",
            "type": "string",
            "example": "65e4decdd286b30065d54af9"
          },
          "name": {
            "description": "User name",
            "type": "string",
            "minLength": 2,
            "maxLength": 32,
            "example": "Martine Belly"
          },
          "email": {
            "description": "User email",
            "type": "string",
            "maxLength": 64,
            "example": "martine.belly@gmail.com"
          },
          "balance": {
            "description": "User balance",
            "type": "number",
            "example": 0
          },
          "photo": {
            "description": "Link to contact photo",
            "type": "string",
            "example": "https://res.cloudinary.com/dy4vxv2lf/image/upload/image.png"
          },
          "createdAt": {
            "description": "Automatically added when you post to a contact",
            "type": "string",
            "example": "2025-04-27T10:55:52.393Z"
          },
          "updatedAt": {
            "description": "Automatically added when you post to a contact",
            "type": "string",
            "example": "2025-04-28T18:22:58.663Z"
          }
        }
      },
      "login": {
        "type": "object",
        "required": [
          "email",
          "password"
        ],
        "properties": {
          "email": {
            "description": "User email",
            "type": "string",
            "maxLength": 64,
            "example": "martine.belly@gmail.com"
          },
          "password": {
            "description": "User password",
            "type": "string",
            "minLength": 8,
            "maxLength": 64,
            "example": "password12345!"
          }
        }
      },
      "transaction": {
        "properties": {
          "date": {
            "description": "Transaction's date",
            "type": "string",
            "format": "date",
            "example": "2025-05-25"
          },
          "type": {
            "description": "Transaction's type",
            "type": "string",
            "example": "+"
          },
          "category": {
            "description": "Transaction's category",
            "type": "string",
            "example": "Car"
          },
          "comment": {
            "description": "Transaction's comment",
            "type": "string",
            "maxLength": 100,
            "example": "Details of this transaction"
          },
          "sum": {
            "description": "Amount of the transaction",
            "type": "number",
            "minimum": 0.01,
            "maximum": 1000000,
            "example": 300
          },
          "userId": {
            "description": "User id",
            "type": "string",
            "example": "65e4decdd286b30065d54af9"
          },
          "_id": {
            "description": "Contact id",
            "type": "string",
            "example": "65e4decdd286b30065d54af9"
          },
          "createdAt": {
            "description": "Automatically added when you post to a contact",
            "type": "string",
            "example": "2025-04-27T10:55:52.393Z"
          },
          "updatedAt": {
            "description": "Automatically added when you post to a contact",
            "type": "string",
            "example": "2025-04-28T18:22:58.663Z"
          }
        }
      }
    },
    "responses": {
      "201": {
        "description": "Transaction successfully created",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 201
                },
                "message": {
                  "type": "string",
                  "example": "Resource created successfully"
                },
                "data": {
                  "$ref": "#/components/schemas/transaction"
                }
              }
            },
            "examples": {
              "success": {
                "summary": "Example successful creation response",
                "value": {
                  "status": 201,
                  "message": "Resource created successfully",
                  "data": {
                    "_id": "65f5a6b7c8d9e0f1a2b3c4d5",
                    "date": "10-May-2025",
                    "type": "+",
                    "category": "Car",
                    "comment": "Details of this transaction",
                    "sum": 300,
                    "userId": "personal"
                  }
                }
              }
            }
          }
        }
      },
      "400": {
        "description": "Bad request error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "Bad request error"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Bad request error"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "UnauthorizedError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Access token expired"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "Transaction not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "example": "Transaction not found"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "The transaction with the provided ID does not exist."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "500": {
        "description": "Internal server error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 500
                },
                "message": {
                  "type": "string",
                  "example": "Something went wrong"
                },
                "data": {
                  "type": "string",
                  "example": "Error details or message from the server"
                }
              }
            }
          }
        }
      }
    }
  }
}